<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	   		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/security
			http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <security:http auto-config="true" use-expressions="true" access-denied-page="/auth/denied">

        <security:intercept-url pattern="/auth/login" access="permitAll"/>
        <security:intercept-url pattern="/system/*" access="permitAll"/>
        <security:intercept-url pattern="/main/admin/**" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/user/**" access="hasRole('ROLE_USER')"/>


        <!--定义固定导向-->
        <!--	<security:form-login
                    login-page="/auth/login"
                    authentication-failure-url="/auth/login?error=true"
                    default-target-url="/main/common/index.do"/>-->
        <security:form-login
                login-page="/auth/login"
                authentication-failure-url="/auth/login?error=true"
                authentication-success-handler-ref="authenticationSuccessHandler"/>

        <security:logout
                invalidate-session="true"
                logout-success-url="/auth/login"
                logout-url="/auth/logout/index.do"/>

        <!--<security:csrf/>-->
    </security:http>

    <!-- 指定一个自定义的authentication-manager :customUserDetailsService -->
    <security:authentication-manager alias="myAuthenticationManager">
        <security:authentication-provider user-service-ref="customUserDetailsService">
            <security:password-encoder hash="md5"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>
    <!--从数据库中加载数据模型-->
    <!--<security:authentication-manager>
            <security:authentication-provider>
                <security:jdbc-user-service data-source-ref="dataSource"
                                   users-by-username-query="select username,password,enabled from user where username=?"
                                   authorities-by-username-query="select username,rolename from user_roles where username=?" />
                    <security:password-encoder ref="passwordEncoder"/>
            </security:authentication-provider>
    </security:authentication-manager>-->

    <!-- 对密码进行MD5编码 -->
    <!--	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>-->

    <!--
        通过 customUserDetailsService,Spring会自动的用户的访问级别.
        也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联.
     -->
    <bean id="customUserDetailsService" class="com.cn.tju.service.CustomUserDetailsService"/>


    <bean id="authenticationSuccessHandler" class="com.cn.tju.util.LoginUrlHandler"/>

    <!-- 配置kaptcha验证码 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg type="java.util.Properties">
                    <props>
                        <prop key="kaptcha.image.width">90</prop>
                        <prop key="kaptcha.image.height">46</prop>
                        <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                        <prop key="kaptcha.textproducer.char.string">0123456789abcdefghijklmnopqrstuvwxyz</prop>
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

</beans>
